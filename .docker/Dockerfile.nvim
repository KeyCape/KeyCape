FROM docker.ogkw.de/master-thesis/relying-party:buildenv

WORKDIR /setup
ARG GIT_TOKEN
ENV DEBIAN_FRONTEND=noninteractive
ENV GO_LINK=https://go.dev/dl/go1.19.1.linux-amd64.tar.gz
ENV PATH=${PATH}:/usr/local/go/bin
RUN apt update && apt upgrade -y && apt install -y curl
RUN curl -fsSL https://deb.nodesource.com/setup_lts.x | bash -
RUN apt update && apt upgrade -y \
	&& apt install -y \
	clangd-14 cmake make g++ git nodejs python3-pip ninja-build gettext libtool libtool-bin autoconf automake pkg-config unzip doxygen zsh tmux clang-14 \
	&& update-alternatives --install /usr/bin/clangd clangd /usr/bin/clangd-14 100 \
	&& rm -rf /var/lib/apt/lists/*

# Clone neovim config
RUN git clone --recursive https://hannibal:${GIT_TOKEN}@git.ogkw.de/hannibal/nvim.git /root/.config/nvim

# Oh my zsh
RUN sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" && chsh -s $(which zsh)

# Change zsh theme
RUN sed -E '/ZSH_THEME/s/=.*/="af-magic"/g' /root/.zshrc

# Build neovim
RUN git clone https://github.com/neovim/neovim && cd neovim && git checkout stable && make install

# Install go
RUN curl -L -o go.tar.gz $GO_LINK && \
	rm -rf /usr/local/go && tar -C /usr/local -xzf go.tar.gz && \
	rm go.tar.gz

# Install elm
RUN curl -L -o elm.gz https://github.com/elm/compiler/releases/latest/download/binary-for-linux-64-bit.gz && \
	gunzip elm.gz && \
	chmod +x elm && \
	mv elm /usr/local/bin/

# Install docker lang-server
RUN npm install -g dockerfile-language-server-nodejs

# Install elmls
RUN npm install -g elm elm-test elm-format @elm-tooling/elm-language-server

# Install cmakels
RUN pip3 install cmake-language-server

# Install gopls
RUN go install golang.org/x/tools/gopls@latest

# Install jsonls
RUN npm i -g vscode-langservers-extracted

# Install json formatter
RUN pip3 install jq

WORKDIR /server